# auto-generated by grc.converter

id: ecss_modulator
label: Modulator
category: '[ecss]'

parameters:
-   id: sel_encoder
    label: Type Encoder
    dtype: enum
    default: '0'
    options: ['0', '1', '2']
    option_labels: [SP-L, NRZ-L, NRZ-L with Sub-carrier]
-   id: sel_convolutional
    label: Convolutional Encoder
    dtype: enum
    default: '0'
    options: ['0', '1']
    option_labels: ['On', 'Off']
-   id: sel_srrc
    label: Root-Raised Cosine Filter
    dtype: enum
    default: '0'
    options: ['0', '1']
    option_labels: ['On', 'Off']
-   id: samp_rate
    label: Sampling Rate
    dtype: real
    default: samp_rate
-   id: bit_rate
    label: Bit Rate
    dtype: real
    default: bit_rate
-   id: sine
    label: Sub-carrier Signal
    dtype: bool
    default: 'True'
    options: ['True', 'False']
    option_labels: [Sine, Square]
    hide: ${ ('none' if (int(sel_encoder) >= 2) else 'all') }
-   id: freq_sub
    label: Sub-carrier frequency
    dtype: real
    default: '16000'
    hide: ${ ('none' if (int(sel_encoder) >= 2) else 'all') }
-   id: k
    label: 'CE: Constraint Length (K)'
    dtype: int
    default: '7'
    hide: ${ ('all' if (int(sel_convolutional) >= 1) else 'none') }
-   id: rate
    label: 'CE: Rate Inverse (1/R) (1/2) --> 2'
    dtype: int
    default: '2'
    hide: ${ ('all' if (int(sel_convolutional) >= 1) else 'none') }
-   id: polys
    label: 'CE: Polynomials'
    dtype: int_vector
    default: '[79,-109]'
    hide: ${ ('all' if (int(sel_convolutional) >= 1) else 'none') }
-   id: state_start
    label: 'CE: Start State'
    dtype: int
    default: '0'
    hide: ${ ('all' if (int(sel_convolutional) >= 1) else 'none') }
-   id: padding
    label: 'CE: Byte Padding'
    dtype: enum
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: ${ ('all' if (int(sel_convolutional) >= 1) else 'none') }
-   id: roll_off
    label: 'RRC Filter: Roll-off factor'
    dtype: real
    default: '0.35'
    hide: ${ ('all' if (int(sel_srrc) >= 1) else 'none') }
-   id: num_taps
    label: 'RRC Filter: Num Taps'
    dtype: int
    default: samp_rate/11
    hide: ${ ('all' if (int(sel_srrc) >= 1) else 'none') }

inputs:
-   domain: stream
    dtype: byte

outputs:
-   domain: stream
    dtype: float

templates:
    imports: import ecss
    make: ecss.modulator(${k}, ${rate}, ${polys}, ${state_start}, ${padding}, ${samp_rate},
        ${bit_rate}, ${sel_convolutional}, ${sel_encoder}, ${sel_srrc}, ${roll_off},
        ${num_taps}, ${sine}, ${freq_sub})

file_format: 1
