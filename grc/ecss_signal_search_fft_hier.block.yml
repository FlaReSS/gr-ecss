# auto-generated by grc.converter

id: ecss_signal_search_fft_hier
label: Signal Search FFT hier
category: '[ecss]'

parameters:
-   id: enable
    label: Enable
    dtype: bool
    default: 'True'
-   id: wintype
    label: Window Type
    dtype: enum
    default: firdes.WIN_BLACKMAN_hARRIS
    options: [firdes.WIN_BLACKMAN_hARRIS, firdes.WIN_HAMMING, firdes.WIN_HANN, firdes.WIN_BLACKMAN,
        firdes.WIN_RECTANGULAR, firdes.WIN_KAISER, firdes.WIN_FLATTOP]
    option_labels: [Blackman-harris, Hamming, Hann, Blackman, Rectangular, Kaiser,
        Flat-top]
    hide: part
-   id: fftsize
    label: FFT size
    dtype: int
    default: '1024'
-   id: decimation
    label: Decimation
    dtype: int
    default: '1'
-   id: freq_central
    label: Central frequency of the signal
    dtype: real
    default: '0.0'
-   id: bandwidth
    label: Bandwidth of the signal
    dtype: real
    default: '2000.0'
-   id: average
    label: Average
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: freq_cutoff
    label: Frequency cut-off (average)
    dtype: real
    default: '100.0'
-   id: threshold
    label: Threshold [dB]
    dtype: real
    default: '10.0'
-   id: samp_rate
    label: samp_rate
    dtype: real
    default: samp_rate

inputs:
-   domain: stream
    dtype: complex

outputs:
-   domain: stream
    dtype: complex

templates:
    imports: |-
        import ecss
        from gnuradio.filter import firdes
    make: ecss.signal_search_fft_hier(${enable}, ${fftsize}, ${decimation}, ${average},
        ${wintype}, ${freq_central}, ${bandwidth}, ${freq_cutoff}, ${threshold}, ${samp_rate})
    callbacks:
    - set_freq_central(${freq_central})
    - set_bandwidth(${bandwidth})
    - set_freq_cutoff(${freq_cutoff})
    - set_threshold(${threshold})
    - set_average(${average})
    - set_carrier(${carrier})
    - set_enable(${enable})

file_format: 1
