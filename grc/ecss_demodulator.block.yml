# auto-generated by grc.converter

id: ecss_demodulator
label: Demodulator
category: '[ecss]'

parameters:
-   id: k
    label: K bits to unpack
    dtype: int
-   id: sel_spl
    label: SPL decoder
    dtype: enum
    default: '0'
    options: ['0', '1']
    option_labels: ['On', 'Off']
-   id: sel_costas
    label: Costas Loop
    dtype: enum
    default: '1'
    options: ['0', '1']
    option_labels: ['On', 'Off']
-   id: ss_ted_type
    label: Timing Error Detector
    dtype: enum
    options: [digital.TED_MUELLER_AND_MULLER, digital.TED_MOD_MUELLER_AND_MULLER,
        digital.TED_ZERO_CROSSING, digital.TED_GARDNER, digital.TED_EARLY_LATE, digital.TED_DANDREA_AND_MENGALI_GEN_MSK,
        digital.TED_MENGALI_AND_DANDREA_GMSK, digital.TED_SIGNAL_TIMES_SLOPE_ML, digital.TED_SIGNUM_TIMES_SLOPE_ML]
    option_labels: ["Mueller and M\xFCller", "Modified Mueller and M\xFCller", Zero
            Crossing, Gardner, Early-Late, D'Andrea and Mengali Gen MSK, Mengali and
            D'Andrea GMSK, 'y[n]y''[n] Maximum Likelihood', 'sgn(y[n])y''[n] Maximum
            Likelihood']
    option_attributes:
        hide_constellation: [part, part, part, all, all, all, all, all, all]
-   id: ss_constellation
    label: TED Slicer Constellation
    dtype: raw
    default: digital.constellation_bpsk().base()
    hide: ${ ss_ted_type.hide_constellation }
-   id: ss_sps
    label: Samples per Symbol
    dtype: real
    default: sps
-   id: ss_ted_gain
    label: Expected TED Gain
    dtype: real
    default: '1.0'
-   id: ss_loop_bandwidth
    label: Loop Bandwidth
    dtype: real
    default: '0.045'
-   id: ss_damping
    label: Damping Factor
    dtype: real
    default: '1.0'
-   id: ss_max_dev
    label: Maximum Deviation
    dtype: real
    default: '1.5'
-   id: ss_out_ss
    label: Output Samples/Symbol
    dtype: int
    default: '1'
-   id: ss_interpolation
    label: Interpolating Resampler
    dtype: enum
    options: [digital.IR_MMSE_8TAP, digital.IR_PFB_NO_MF, digital.IR_PFB_MF]
    option_labels: ['MMSE, 8 tap FIR', 'Polyphase Filterbank, MMSE', 'Polyphase Filterbank,
            MF']
    option_attributes:
        hide_nfilters: [all, '', '']
        hide_pfb_mf_taps: [all, all, '']
-   id: ss_nfilter
    label: Filterbank Arms
    dtype: int
    default: '128'
    hide: ${ ss_interpolation.hide_nfilters }
-   id: ss_pfb_mf_taps
    label: PFB MF Taps
    dtype: real_vector
    default: '[]'
    hide: ${ ss_interpolation.hide_pfb_mf_taps }
-   id: cl_freq_sub
    label: 'CL: Sub-carrier frequency'
    dtype: real
    default: '16000'
    hide: ${ ('all' if (int(sel_costas) >= 1) else 'none') }
-   id: cl_loop_bandwidth
    label: 'CL: Loop Bandwidth'
    dtype: real
    default: 6.28/100
    hide: ${ ('all' if (int(sel_costas) >= 1) else 'none') }
-   id: cl_order
    label: 'CL: order'
    dtype: int
    default: '2'
    hide: ${ ('all' if (int(sel_costas) >= 1) else 'none') }
-   id: samp_rate
    label: Sample Rate
    dtype: real
    default: samp_rate

inputs:
-   domain: stream
    dtype: float

outputs:
-   domain: stream
    dtype: byte

templates:
    imports: |-
        import ecss
        from gnuradio import digital
        from gnuradio import filter
    make: ecss.demodulator(${k}, ${cl_loop_bandwidth}, ${cl_order}, ${cl_freq_sub},
        ${ss_sps}, ${ss_loop_bandwidth}, ${ss_ted_gain}, ${ss_damping}, ${ss_max_dev},
        ${ss_out_ss}, ${ss_interpolation}, ${ss_ted_type}, ${ss_constellation}, ${ss_nfilter},
        ${ss_pfb_mf_taps}, ${sel_costas}, ${sel_spl}, ${samp_rate})

file_format: 1
