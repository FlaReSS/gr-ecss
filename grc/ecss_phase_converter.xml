<?xml version="1.0"?>
<block>
  <name>phase converter</name>
  <key>ecss_phase_converter</key>
  <category>[ecss]</category>
  <import>import ecss</import>
  <make>ecss.phase_converter($N)</make>

  <!-- <param>
    <name>Input Type</name>
    <key>type</key>
    <type>enum</type>
    <option>
      <name>Double</name>
      <key>f64</key>
    </option>
    <option>
      <name>Float</name>
      <key>float</key>
    </option>
  </param> -->

  <param>
    <name>number of bits</name>
    <key>N</key>
    <type>int</type>
  </param>

  <check>$N &gt;= 1 and $N &lt;= 52</check>

  <sink>
    <name>in</name>
    <type>float</type>
    <!-- <type>$type</type> -->
  </sink>

  <source>
    <name>out</name>
    <type>s64</type>
  </source>

  <doc>
    This block converts the phase input in a int64 normalized output.

    Furthermore, this block allows to reduce the accuracy (setting the number of bits N) of the mathematics in order to simulate properly a real behavior.

    Finally, this block is designed for work together with the coherent phase modulator OOT of the ecss module.

    Pay attention that the input is considered as radiant (suggested to be in the range [-pi; pi], but an wrapping function is done internally). The output is the input value, normalized by pi, rounded and multiplied by 2^(64-N) in order to be suitable as input for an "integer accumulator".
  </doc>
</block>
