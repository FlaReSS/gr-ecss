id: ecss_signal_detector
label: signal_detector
category: '[ecss]'


# Make these parameters into a form that can be used in the make entry.
# int samp_rate, int fft_size, float threshold, int decimation, float search_bandwidth

templates:
    imports: |-
        from gnuradio import ecss
        from gnuradio.fft import window
    make: ecss.signal_detector(${modulation},${samp_rate}, ${fft_size}, ${wintype}, ${threshold}, ${decimation}, ${search_bandwidth})
    callbacks:
    - set_samp_rate(${samp_rate})
    - set_fft_size(${fft_size})
    - set_threshold(${threshold})
    - set_decimation(${decimation})
    - set_search_bandwidth(${search_bandwidth})
    - set_modulation(${modulation})
  


#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: modulation
  label: Modulation
  dtype: int
  default: 'CW' 
  options: ['0', '1', '2']
  option_labels: ['CW', 'NRZ', 'BPSK']
- id: samp_rate
  label: Sample Rate
  dtype: int
  default: samp_rate
- id: fft_size
  label: FFT Size
  dtype: int
  default: 1024
-   id: wintype
    label: Window Type
    dtype: enum
    default: window.WIN_BLACKMAN_hARRIS
    options: [window.WIN_BLACKMAN_hARRIS, window.WIN_HAMMING, window.WIN_HANN, window.WIN_BLACKMAN,
        window.WIN_RECTANGULAR, window.WIN_KAISER, window.WIN_FLATTOP]
    option_labels: [Blackman-harris, Hamming, Hann, Blackman, Rectangular, Kaiser,
        Flat-top]
- id: threshold
  label: Threshold [dB]
  dtype: float
  default: threshold
- id: decimation
  label: Decimation
  dtype: int
  default: 1
- id: search_bandwidth
  label: Search Bandwidth
  dtype: float
  default: 2000.0
#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- domain: stream
  label: in
  dtype: complex
  vlen: 1
  optional: 0
- label: locked
  domain: message
  id: locked
  optional: true

outputs:
- domain: stream
  label: out
  dtype: complex
  vlen: 1
  optional: 0
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
