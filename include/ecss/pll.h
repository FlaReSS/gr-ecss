/* -*- c++ -*- */
/*
 * Copyright 2018 Antonio Miraglia - ISISpace.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifndef INCLUDED_ECSS_PLL_H
#define INCLUDED_ECSS_PLL_H

#include <ecss/api.h>
#include <gnuradio/sync_block.h>

namespace gr {
  namespace ecss {

    /*!
     * \brief PLL with complex mixer between Input and reference signal
     *
     * \ingroup ecss
     *
     * \details This block generates a complex output signal which is the complex multiplication between the input and the reference signal generated by PLL.
     * The ecss PLL provide in output the value of frequency (expressed in Hz) of the internal reference signal, the output of the phase detector (espressed in rad in range [-pi; pi]) and the int64 value of the internal integer accumulator (useful for the ecss coherent phase accumulator).
     * Furthermore, this block allows to reduce the accuracy (setting the number of bits N) of the mathematics in order to simulate properly a real behavior.
     */
    class ECSS_API pll : virtual public gr::sync_block
    {
     public:
       /*!
        * \brief Return a shared_ptr to a new instance of ecss::pll.
        */
      typedef std::shared_ptr<pll> sptr;

      /*!
        * \brief Make a PLL with complex mixer.
        *
        * \param samp_rate Sampling rate of signal.
        * \param N number of bits.
        * \param coefficients value of the coefficients in the following order:
        * [0]= the Proportional arm of the second order Loop Filter;
        * [1]= the Integral arm of the second order Loop Filter;
        * [2]= the Integral arm of the second order Loop Filter for the imperfect integration;
        * [3]= the Proportional arm of the third order Loop Filter;
        * [4]= the Integral arm of the third order Loop Filter;
        * [5]= the Double Integral arm of the third order Loop Filter.
        * \param freq_central central value of frequency that PLL can catch.
        * \param bw bandwidth of frequency that PLL can catchl.
       */
      static sptr make(int samp_rate, int N, const std::vector<double> &coefficients, float freq_central, float bw);


      /*******************************************************************
      * SET FUNCTIONS
      *******************************************************************/

      /*!
        * \brief Set the precision of the PLL.
        *
        * \details
        * Sets the internal number of bits.
        * This value is set only at the start.
        *
        * \param N    (int) new number of bits
        */
      virtual void set_N(int N) = 0;



      /*!
        * \brief Set the loop gain coefficients.
        *
        * \details
        * Sets the loop filter's coefficient gain parameters.
        *
        * This values should really only be set by adjusting the loop
        * bandwidth and damping factor.
        *
        * \param coefficients (double) new coefficients
        */
      virtual void set_coefficients(const std::vector<double> &coefficients) = 0;

      /*!
        * \brief Set the control loop's frequency.
        *
        * \details
        * Sets the control loop's frequency. While this is normally
        * updated by the inner loop of the algorithm, it could be
        * useful to manually initialize, set, or reset this under
        * certain circumstances.
        *
        * \param freq    (float) new frequency
        */
      virtual void set_frequency(float freq) = 0;

      /*!
        * \brief Set the control loop's phase.
        *
        * \details
        * Sets the control loop's phase. While this is normally
        * updated by the inner loop of the algorithm, it could be
        * useful to manually initialize, set, or reset this under
        * certain circumstances.
        *
        * \param phase (float) new phase
        */
      virtual void set_phase(float phase) = 0;

      /*!
        * \brief Set the control loop's central frequency.
        *
        * \details
        * Set the central frequency the control loop can track.
        *
        * \param freq (float) new central frequency
        */
      virtual void set_freq_central(float freq) = 0;

      /*!
        * \brief Set the control loop's bandwidth.
        *
        * \details
        * Set the bandwidth the control loop can track.
        *
        * \param bw (float) new bandwidth
        */
      virtual void set_bw(float bw) = 0;

      /*******************************************************************
      * GET FUNCTIONS
      *******************************************************************/


      /*!
        * \brief Returns the loop gain coefficients.
        */
      virtual std::vector<double> get_coefficients() const = 0;

      /*!
        * \brief Get the control loop's frequency estimated.
        */
      virtual float get_frequency() const = 0;

      /*!
        * \brief Get the control loop's phase estimate.
        */
      virtual float get_phase() const = 0;

      /*!
        * \brief Get the control loop's central frequency.
        */
      virtual float get_freq_central() const = 0;

      /*!
        * \brief Get the control loop's bandwidth.
        */
      virtual float get_bw() const = 0;
    };

  } // namespace ecss
} // namespace gr

#endif /* INCLUDED_ECSS_PLL_H */
